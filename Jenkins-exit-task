pipeline {
  agent { label 'build-in' }
  options { timestamps () }
  environment{
    MAN_APPROVE = 'NO'
    ARTIFACT = "pipeline-aausiankin-${env.BUILD_NUMBER}.tar.gz" 
  }
  tools { 
    maven 'maven_3.8.4' 
  }
  
  stages {

    stage('Preparation') {
      steps {
        cleanWs()
        git branch: 'aausiankin-exit-task', url: 'https://github.com/ovsyankinaa/build-t00ls.git'
      }
    } 

    stage('Building code') {
      steps {
        dir('helloworld-project/helloworld-ws/') {
          sh 'mvn clean package -DskipTests'
        }
      }
    }

    stage('Sonar scan') {
      steps {
        dir('helloworld-project/helloworld-ws/') {
          withSonarQubeEnv('sonar_9.3') {
            sh '''mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.1.2184:sonar \
-Dsonar.projectKey=pipeline:maven \
-Dsonar.projectName=pipeline_docker_maven \
-Dsonar.projectVersion=1.0 \
-Dsonar.sources=src/main/java/org/jboss/as/quickstarts/wshelloworld \
-Dsonar.java.binaries=src/main/java/org/jboss/as/quickstarts/wshelloworld'''
          }
        }
      }
    }

    stage('testing') {
      parallel {

        stage('pre-integration-test') {
          steps{
            dir('helloworld-project/helloworld-ws/') {
              sh 'mvn pre-integration-test'
            }
          }
        }

        stage('integration-test') {
          steps{
            dir('helloworld-project/helloworld-ws/') {
              sh 'echo "mvn pre-integration-test"'
            }
          }
        }

        stage('post-integration-test') {
          steps{
            dir('helloworld-project/helloworld-ws/') {
              sh 'echo "mvn post-integration-test"'
            }
          }
        }
      }
    }

    stage('Triggering job and fetching artefact after finishing') {
      steps{
        build job: 'day6/MNTLAB-aausiankin-child1-build-job', 
          parameters: [
            string(name: 'BRANCH_NAME', value: 'branch1')
          ],
          wait : true
          copyArtifacts fingerprintArtifacts: true, 
            projectName: 'day6/MNTLAB-aausiankin-child1-build-job', selector: lastSuccessful()
      }
    }

    stage('Packaging anf Publishing results') {
      parallel {

        stage('Archiving artefact') {
          steps{
            sh """tar -czf ${ARTIFACT} *_dsl_script.tar.gz \
helloworld-project/helloworld-ws/target/helloworld-ws.war Jenkins-exit-task"""
            archiveArtifacts artifacts: "${ARTIFACT}", followSymlinks: false
            withCredentials([usernamePassword(credentialsId: 'jenkins_docker',
                             passwordVariable: 'NEXUS_PASS', 
                             usernameVariable: 'NEXUS_USER')]) {
              sh """curl --user $NEXUS_USER:$NEXUS_PASS --upload-file \
$WORKSPACE/${ARTIFACT} http://172.22.0.5:8081/repository/exit_task/${ARTIFACT}"""
            }
          }
        }

        stage('BUILD AND UPLOAD DOCKER IMAGE') {
          steps{
            script{
              docker_img = docker.build "172.22.0.5:8085/repository/docker_repo/helloworld-aausiankin:${env.BUILD_NUMBER}"
              docker.withRegistry( 'http://172.22.0.5:8085', 'jenkins_nexus' ) {
              docker_img.push("${env.BUILD_NUMBER}")
              }
            }
          }
        }
      }
    }

    stage('Asking for manual approval'){
      steps{
        script{
          try {
            timeout(time:5, unit:'MINUTES') {
              MAN_APPROVE = input message: 'Deploy', ok: 'Continue', parameters: [choice(name: 'MAN_APPROVE',
                             choices: 'YES\nNO',description: 'Deploy?')]
            }
          }
          catch (error) {
            MAN_APPROVE = 'NO'
            sh 'echo "Timeout has been reached!"'
          }
        }
      }
    }
    
    stage('Deployment'){
      when { environment name: 'MAN_APPROVE', value: 'YES' }
      steps{
        sh 'echo "DEPLOY"'
      }
    }
  }
}

